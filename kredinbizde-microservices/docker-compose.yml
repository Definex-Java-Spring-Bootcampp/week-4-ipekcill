version: '3.5'
services:
  kredinbizde-discovery:
    image: ipekcill/kredinbizde-discovery
    container_name: kredinbizde-discovery
    build:
      context: ./kredinbizde-discovery
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  gateway:
    image: ipekcill/kredinbizde-gw
    container_name: kredinbizde-gw
    build:
      context: ./kredinbizde-gw
      dockerfile: Dockerfile
    ports:
      - "8765:8765"
    depends_on:
      - kredinbizde-discovery
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE= http://kredinbizde-discovery:8761/eureka

  garanti-service:
    image: ipekcill/garanti-service
    container_name: garanti-service
    build:
      context: ./garanti-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE= http://kredinbizde-discovery:8761/eureka
    depends_on:
      - kredinbizde-discovery

  kredinbizde-service:
    image: ipekcill/kredinbizde-service
    container_name: kredinbizde-service
    build:
      context: ./kredinbizde-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE= http://kredinbizde-discovery:8761/eureka
    depends_on:
      - kredinbizde-discovery
      - rabbitmq
      - postgres

  notification-service:
    image: ipekcill/notification-service
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - rabbitmq

  log-service:
    image: ipekcill/log-service
    container_name: log-service
    build:
      context: ./log-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"

  mongodb:
    container_name: mongodb
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=logdb
    volumes:
      - mongo-data:/data/db

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "log-topic"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  postgres:
    image: postgres:14-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=sa
      - POSTGRES_DB=kredinbizde

  redis:
    image: "redis:7-alpine"
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./tmp/redis_data:/var/lib/redis/data